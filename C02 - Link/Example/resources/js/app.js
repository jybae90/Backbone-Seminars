// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var AppView, IntroView, WorkView, _ref, _ref1, _ref2;
    WorkView = (function(_super) {
      __extends(WorkView, _super);

      function WorkView() {
        _ref = WorkView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      WorkView.prototype.tagName = 'div';

      WorkView.prototype.template = _.template($('#work-template').html());

      WorkView.prototype.render = function() {
        this.$el.html(this.template);
        this.$el.addClass('container').addClass('content');
        return this;
      };

      return WorkView;

    })(Backbone.View);
    IntroView = (function(_super) {
      __extends(IntroView, _super);

      function IntroView() {
        _ref1 = IntroView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      IntroView.prototype.tagName = 'div';

      IntroView.prototype.template = _.template($('#intro-template').html());

      IntroView.prototype.render = function() {
        this.$el.html(this.template);
        this.$el.addClass('container').addClass('content');
        return this;
      };

      return IntroView;

    })(Backbone.View);
    AppView = (function(_super) {
      __extends(AppView, _super);

      function AppView() {
        _ref2 = AppView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      AppView.prototype.el = $('body');

      AppView.prototype.events = {
        'click #btn-intro': 'showIntro',
        'click #btn-work': 'showWork'
      };

      AppView.prototype.showIntro = function() {
        var introView;
        introView = new IntroView;
        return this.$('section').html(introView.render().el);
      };

      AppView.prototype.showWork = function() {
        var workView;
        workView = new WorkView;
        return this.$('section').html(workView.render().el);
      };

      return AppView;

    })(Backbone.View);
    return new AppView;
  });

}).call(this);
